#include <cstddef>

using namespace std; 
{ 
	int data; 
	Node *prev, *next; 
	static Node* getnode(int data) 
	{ 
		Node* newNode = (Node*)malloc(sizeof(Node)); 
	  newNode->data = data; 
		newNode->prev = newNode->next = NULL; 
		return newNode; 
	} 
}; 
class Deque 
{ 
	Node* Front; 
	Node* Rear; 
	int Size; 
public: 
	Deque() 
	{ 
		Front = Rear = NULL; 
		Size = 0; 
	} 
	void insertFront(int data); 
	void insertRear(int data); 
	void deleteFront(); 
	void deleteRear(); 
	int getFront(); 
	int getRear(); 
	int size(); 
	bool isEmpty(); 
	void erase(); 
}; 
bool Deque::isEmpty() 
{ 
	return (Front == NULL); 
} 
int Deque::size() 
{ 
	return Size; 
} 
void Deque::insertFront(int data) 
{ 
	Node* newNode = Node::getnode(data); 
	if (newNode == NULL) 
		cout << "OverFlow\n"; 
	else
	{ 
		 if (Front == NULL) 
			Rear = Front = newNode; 
		else
		{ 
			newNode->next = Front; 
			Front->prev = newNode; 
			Front = newNode; 
		} 
		 Size++; 
	} 
} 
void Deque::insertRear(int data) 
{ 
	Node* newNode = Node::getnode(data); 
	if (newNode == NULL) 
		cout << "OverFlow\n"; 
	else
	{ 
		if (Rear == NULL) 
			Front = Rear = newNode; 
		else
		{ 
			newNode->prev = Rear; 
			Rear->next = newNode; 
			Rear = newNode; 
		} 
		Size++; 
	} 
} 
void Deque::deleteFront() 
{ 
	if (isEmpty()) 
		cout << "UnderFlow\n"; 
	else
	{ 
		Node* temp = Front; 
		Front = Front->next; 
		if (Front == NULL) 
			Rear = NULL; 
		else
			Front->prev = NULL; 
		free(temp); 
		Size--; 
	} 
} 
void Deque::deleteRear() 
{ 
	if (isEmpty()) 
		cout << "UnderFlow\n"; 
	else
	{ 
		Node* temp = rear; 
		rear = rear->prev; 
		 if (rear == NULL) 
			front = NULL; 
		else
			rear->next = NULL; 
		free(temp); 
		 Size--; 
	} 
} 
int Deque::getFront() 
{ 
	if (isEmpty()) 
		return -1; 
	return front->data; 
} 
int Deque::getRear() 
{ 
	if (isEmpty()) 
		return -1; 
	return rear->data; 
} 
void Deque::erase() 
{ 
	rear = NULL; 
	while (front != NULL) 
	{ 
		Node* temp = front; 
		front = front->next; 
		free(temp); 
	} 
	Size = 0; 
} 
